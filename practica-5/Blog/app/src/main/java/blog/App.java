/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package blog;
import blog.DB.DB;
import blog.DB.GestionDb;
import blog.encapsulaciones.Message;
import blog.encapsulaciones.User;
import blog.routes.ArticleRoutes;
import blog.routes.CommentRoutes;
import blog.routes.TagRoutes;
import blog.routes.UserRoutes;
import io.javalin.Javalin;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;
import jakarta.servlet.http.Cookie;
import org.eclipse.jetty.websocket.api.Session;


import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.*;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import jakarta.persistence.*;

import org.jasypt.util.text.BasicTextEncryptor;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }


    //Creando el repositorio de las sesiones recibidas.
    public static List<Session> usuariosConectados = new ArrayList<>();

    public static void main(String[] args) {
        var app = Javalin.create(config -> {
            config.staticFiles.add(staticFilesConfig -> {
                staticFilesConfig.hostedPath = "/";
                staticFilesConfig.directory = "/public";
            });

        }).start(8080);

        app.before(ctx -> {
            // Verificar si la cookie de recordar usuario existe
            Map<String, String> cookieMap = ctx.cookieMap();
            String rememberMeCookieValue = cookieMap.get("rememberMe");
            if (rememberMeCookieValue != null) {
                Cookie rememberMeCookie = new Cookie("rememberMe", rememberMeCookieValue);
                String encryptedUsername = rememberMeCookie.getValue();
                BasicTextEncryptor textEncryptor = new BasicTextEncryptor();
                textEncryptor.setPassword("clave_encriptacion");
                String decryptedUsername = textEncryptor.decrypt(encryptedUsername);

                // Establecer la sesión del usuario automáticamente
                ctx.sessionAttribute("userId", decryptedUsername);
            }
        });

        UUID uuid = UUID.randomUUID();

                String idAdmin = uuid.toString();
                
                User admin = new User(idAdmin, "admin", "admin", "admin", "administrador");

                GestionDb<User> gestionDb = GestionDb.getInstance(User.class);
                 EntityManager entityManager = gestionDb.getEntityManager();
                 EntityTransaction transaction = entityManager.getTransaction();
     
                 transaction.begin();
                 
                 entityManager.persist(admin);
             
                 transaction.commit();

        app.before("/home.html", ctx -> {
            boolean sessionExists = ctx.sessionAttribute("userId") != null; // Verificar si la sesión existe
            String path = ctx.path();
        
            if (!path.equals("/login.html") && !path.equals("/homeLogOut.html") && !path.equals("/login") && !sessionExists) {
                ctx.redirect("/homeLogOut.html");
                System.out.println("NO HAY SESION");
            } else if (path.equals("/login.html") && sessionExists) {
                ctx.redirect("/home.html");
                System.out.println("HAY UNA SESION");
            }
        });

        app.before("/homeLogOut.html", ctx -> {
            boolean sessionExists = ctx.sessionAttribute("userId") != null; // Verificar si la sesión existe
            String path = ctx.path();
            
             if(path.equals("/homeLogOut.html") && sessionExists) {
                System.out.println("HAY UNA SESION");
                ctx.redirect("/home.html");
            }
        });

        app.before("/profile.html", ctx -> {
            boolean sessionExists = ctx.sessionAttribute("userId") != null; // Verificar si la sesión existe
            
             if(!sessionExists) {
                ctx.redirect("/homeLogOut.html");
            }
        });

        app.before("/newArticle.html", ctx -> {
            boolean sessionExists = ctx.sessionAttribute("userId") != null; // Verificar si la sesión existe
            
             if(!sessionExists) {
                ctx.redirect("/homeLogOut.html");
            }
        });

        app.before("/article.html", ctx -> {
            boolean sessionExists = ctx.sessionAttribute("userId") != null; // Verificar si la sesión existe
            String id = ctx.queryParam("id");         
             if(!sessionExists) {
                ctx.redirect("/articleLogOut.html?id=" + id);
            }
        });



        app.before("/misArticulos.html", ctx -> {
            boolean sessionExists = ctx.sessionAttribute("userId") != null; // Verificar si la sesión existe
            String path = ctx.path();
        
            if (!path.equals("/login.html") && !path.equals("/homeLogOut.html") && !path.equals("/login") && !sessionExists) {
                // ctx.redirect("/homeLogOut.html");

                Message msg = new Message("Warning", "Para acceder a este apartado debe iniciar sesion");

                Gson gson = new Gson();

                String json  = gson.toJson(msg);
                ctx.contentType("application/json").result(json);

                System.out.println("NO HAY SESION");
                ctx.redirect("/homeLogOut.html");
            } else if (path.equals("/login.html") && sessionExists) {
                ctx.redirect("/misArticulos.html");
                System.out.println("HAY UNA SESION");
            }
        });

        app.routes(() -> {
            UserRoutes.configure(app);
            ArticleRoutes.configure(app);
            TagRoutes.configure(app);
            CommentRoutes.configure(app);

            app.get("/", ctx -> {
                ctx.redirect("/home.html");
                // ctx.result("HOLA");
            });

            app.get("/profile", ctx -> {

                boolean sessionExists = ctx.sessionAttribute("userId") != null;
                if (sessionExists) {
                    String aux = ctx.sessionAttribute("userId");
                    System.out.println(aux);
                    ctx.result(aux);
            
                } else {
                    ctx.result("No active session");
                }
            });


            app.ws("/mensajeServidor/{chatId}", ws -> {

                ws.onConnect(ctx -> {
                    System.out.println("Conexión Iniciada - "+ctx.getSessionId());
                    usuariosConectados.add(ctx.session);

                    Map<String, String> pathParams = ctx.pathParamMap();
                    String chatId = pathParams.get("chatId");
                    System.out.println("CHAT ID: " + chatId);


                    DB.initDB().getSalas().putIfAbsent("admin", new HashMap<>());


                    Map<String, Map<String, Session>> salas = DB.initDB().getSalas();
                    Set<String> salaIds = salas.keySet();

                    // Crear un arreglo JSON para almacenar las salas y sesiones
                    JsonArray salaArray = new JsonArray();

                    // Iterar sobre las salas
                    for (String salaId : salaIds) {
                        // Obtener el mapa de sesiones para la sala actual
                        Map<String, Session> sesionesSala = salas.get(salaId);

                        // Obtener la fecha y hora actual como un objeto Date
                        Date fechaHoraActual = new Date();

                        // Crear un formato para la cadena de fecha y hora deseada
                        SimpleDateFormat formatoFechaHora = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

                        // Convertir el objeto Date a una cadena de fecha y hora
                        String fechaHoraString = formatoFechaHora.format(fechaHoraActual);

                        // Crear un objeto JSON para la sala actual
                        JsonObject salaObj = new JsonObject();
                        salaObj.addProperty("salaId", salaId);
                        salaObj.addProperty("hora", fechaHoraString);
                        salaObj.addProperty("mensajes", DB.initDB().getSalas().get(salaId).size());
                        salaArray.add(salaObj);
                    }

                    // Convertir el arreglo salaArray a un string JSON
                    String jsonString = new Gson().toJson(salaArray);
                    System.out.println(jsonString);

                        // Enviar el string JSON al cliente
                        for(Session sesionConectada : DB.initDB().getSalas().get("admin").values()){
                            try {
                                if (sesionConectada.isOpen()) {
                                    sesionConectada.getRemote().sendString(jsonString);
                                }
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                    }




                    if (chatId.equalsIgnoreCase("admin")) {
                    DB.initDB().getSalas().get(chatId).put(ctx.getSessionId(), ctx.session);



                        return;
                    }
                    

                    DB.initDB().getSalas().putIfAbsent(chatId, new HashMap<>());

                    DB.initDB().getSalas().get(chatId).put(ctx.getSessionId(), ctx.session);

                    

                    // Obtener los mensajes previos de la sala
                    StringBuilder mensajesSala = DB.initDB().getMensajesSalas().get(chatId);
                    if (mensajesSala != null) {
                        System.out.println("HAY mensajes previos \n");
                        String mensajesPrevios = mensajesSala.toString();
                        if (!mensajesPrevios.isEmpty()) {

                            System.out.println(mensajesPrevios.toString());

                            ctx.session.getRemote().sendString(mensajesPrevios.toString());
                        }
                    } else {
                        System.out.println("no hay mensajes previos");
                        mensajesSala = new StringBuilder();
                        DB.initDB().getMensajesSalas().put(chatId, mensajesSala);
                        mensajesSala.append('[');
                        mensajesSala.append(']');
                    }


                    // System.out.println(usuariosConectados.size());
                });
    
                ws.onMessage(ctx -> {

                    Map<String, String> pathParams = ctx.pathParamMap();
                    String chatId = pathParams.get("chatId");
                    System.out.println("CHAT ID: " + chatId);


                    if (chatId.equalsIgnoreCase("admin")) {
                        Gson gson = new Gson();
                        Message msg = gson.fromJson(ctx.message(), Message.class);
                        
                        if (msg.getTitle().equalsIgnoreCase("delete")) {

                            enviarMensajeAClientesConectados("sala eliminada", msg.getMessage());
                            DB.initDB().getSalas().get(msg.getMessage()).clear();
                            DB.initDB().getSalas().remove(msg.getMessage());
                            System.out.println("sala eliminada" + ctx.message());

                        }
                        return;
                    }

                    // Mostrando mensaje en consola
                    System.out.println("Mensaje Recibido de "+ctx.getSessionId()+" ====== ");
                    // System.out.println("Mensaje: "+ctx.message());
                    System.out.println("================================");
                    //
                    enviarMensajeAClientesConectados(ctx.message(), chatId);
                    insertarMensajesEnMensajesSala(chatId, ctx.message());

                    
                });
    
                ws.onClose(ctx -> {
                    System.out.println("Conexión Cerrada - "+ctx.getSessionId());

                    Map<String, String> pathParams = ctx.pathParamMap();
                    String chatId = pathParams.get("chatId");
                    System.out.println("CHAT ID: " + chatId);

                    if (!chatId.equalsIgnoreCase("admin")) {
                        try {
                            DB.initDB().getSalas().get(chatId).remove(ctx.getSessionId());
                            
                        } catch (Exception e) {
                            System.out.println(e.toString());
                        }
                    }
                });
    
                ws.onError(ctx -> {
                    System.out.println("Ocurrió un error en el WS");
                });
            });



        });
    }

    public static void insertarMensajesEnMensajesSala(String chatId, String mensaje) {


        StringBuilder mensajesSala = DB.initDB().getMensajesSalas().get(chatId);

        // Insertar el mensaje antes de ']'
        if (mensajesSala.length() == 2) {
            mensajesSala.insert(mensajesSala.length() - 1, mensaje);
        } else if (mensajesSala.charAt(mensajesSala.length() - 2) != ',') {
            mensajesSala.insert(mensajesSala.length() - 1, ',' + mensaje);
        }
    }


    public static void enviarMensajeAClientesConectados(String mensaje, String chatId){          


        for(Session sesionConectada : DB.initDB().getSalas().get(chatId).values()){
            try {
                sesionConectada.getRemote().sendString(mensaje);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

}
